(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{743:function(e,a,s){"use strict";s.r(a);var t=s(104),r=Object(t.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("本文还未验证成功。\n{:.error}")]),e._v(" "),s("h2",{attrs:{id:"编译-ffmpeg-为-wasm-版本"}},[e._v("编译 ffmpeg 为 wasm 版本 "),s("a",{staticClass:"header-anchor",attrs:{href:"#编译-ffmpeg-为-wasm-版本"}},[e._v("#")])]),e._v(" "),s("p",[e._v("我一开始以为难度会很大，后来发现并没有那么大，因为有一个 "),s("a",{attrs:{href:"https://bgrins.github.io/videoconverter.js/",target:"_blank",rel:"noopener noreferrer"}},[e._v("videoconverter.js"),s("OutboundLink")],1),e._v(" 已经转过了（它是一个借助 ffmpeg 在网页实现音视频转码的），关键在于把一些没用的特性在 configure 的时候给disable掉，不然编译的时候会报语法错误。这里使用的是"),s("a",{attrs:{href:"https://github.com/juj/emsdk",target:"_blank",rel:"noopener noreferrer"}},[e._v("emsdk"),s("OutboundLink")],1),e._v("转的wasm，emsdk的安装方法在它的"),s("a",{attrs:{href:"https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("安装教程"),s("OutboundLink")],1),e._v("已经说得很明白，主要是使用脚本判定系统下载不同编译好的文件。下载好之后就会有几个可执行文件，包括emcc、emc++、emar等命令，emcc是C的编译器，emc++是C++的编译器，而emar是用于把不同的.o库文件打包成一个.a文件的。")]),e._v(" "),s("p",[e._v("先要在"),s("a",{attrs:{href:"https://www.ffmpeg.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("ffmpeg"),s("OutboundLink")],1),e._v("的官网下载源码。")]),e._v(" "),s("h3",{attrs:{id:"_1-configure"}},[e._v("1. configure "),s("a",{staticClass:"header-anchor",attrs:{href:"#_1-configure"}},[e._v("#")])]),e._v(" "),s("p",[e._v("解压进入目录，然后执行以下命令：")]),e._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[e._v("emconfigure ./configure --cc"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"emcc"')]),e._v(" \n--prefix"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("/"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/dist --enable-cross-compile --target-os"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("none --arch"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x86_64 --cpu"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("generic --disable-ffplay --disable-ffprobe --disable-ffserver \n--disable-asm --disable-doc --disable-devices --disable-pthreads --disable-w32threads --disable-network --disable-hwaccels \n--disable-parsers --disable-bsfs --disable-debug --disable-protocols --disable-indevs --disable-outdevs --enable-protocol"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("file\n")])])]),s("p",[e._v("执行报错："),s("code",[e._v('Unknown option "--disable-ffserver"')]),e._v("，去掉 "),s("code",[e._v('Unknown option "--disable-ffserver"')]),e._v(" 再执行。")]),e._v(" "),s("p",[e._v("通常configure的作用是生成Makefile——configure阶段确认一些编译的环境和参数，然后生成编译命令放到Makefile里面。")]),e._v(" "),s("p",[e._v("而前面的emconfigure的主要作用是把编译器指定为emcc，但只是这样是不够的，因为ffmpeg里面有一些子模块，并不能彻底地把所有的编译器都指定为emcc，好在ffmpeg的configure可以通过–cc的参数指定自定义的编译器，在Mac上C编译器一般是使用/usr/bin/clang，这里指定为emcc。")]),e._v(" "),s("p",[e._v("后面的disable是把一些不支持wasm的特性给禁掉了，例如–disable-asm是把使用汇编代码的部分给禁掉了，因为那些汇编语法emcc不兼容，没有禁掉的话编译会报错语法错误。另外一个–disable-hwaccels是把硬解码禁用了，有些显卡支持直接解码，不需要应用程序解码（软解码），硬解码性能明显会比软解码的高，")]),e._v(" "),s("p",[e._v("等待configure命令执行完了，就会生成Makefile和相关的一些配置文件。")]),e._v(" "),s("h3",{attrs:{id:"_2-make"}},[e._v("2. make "),s("a",{staticClass:"header-anchor",attrs:{href:"#_2-make"}},[e._v("#")])]),e._v(" "),s("p",[e._v("make是开始编译的阶段，执行以下命令进行编译：")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("emmake "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v("\n")])])]),s("p",[e._v("编译需要耗费\n编译完成之后，会在ffmpeg目录生成一个总的ffmpeg文件，在ffmpeg的libavcodec等目录会生成libavcodec.a等文件，这些文件是后面我们要使用的bitcode文件，bitcode是一种已编译程序的中间代码。")]),e._v(" "),s("p",[e._v("最后在执行strip -o ffmpeg ffmpeg_g命令会挂掉，但是不要紧，strip改成cp ffmpeg_g ffmpeg就好了。\n"),s("img",{attrs:{src:"http://images.fuyix.cn/blog/181009/4LIjK8EDC9.png?imageslim",alt:"mark"}})]),e._v(" "),s("p",[e._v("这个ffmpeg文件就是我们第一步要得到的LLVM bitcode，下一步我们就可以将这个LLVM bitcode编译到js或者wasm里面啦")]),e._v(" "),s("p",[s("img",{attrs:{src:"http://images.fuyix.cn/blog/181009/0i0lCG1g2J.png?imageslim",alt:"mark"}})]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" ffmpeg-4.0.2/libavcodec/libavcodec.a ./lib2/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" ffmpeg-4.0.2/libavformat/libavformat.a ./lib2/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" ffmpeg-4.0.2/libavutil/libavutil.a ./lib2/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" ffmpeg-4.0.2/libswresample/libswresample.a ./lib2/\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" ffmpeg-4.0.2/libswscale/libswscale.a ./lib2/\n\nemcc libavcodec.a -o libavcodec.bc\nemcc libavformat.a -o libavformat.bc\nemcc libavutil.a -o libavutil.bc\nemcc libswresample.a -o libswresample.bc\nemcc libswscale.a -o libswscale.bc\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 下面这一步出错，暂时还没有找到解决办法。")]),e._v("\nemcc web.c process.c "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/lib2/libavformat.bc "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/lib2/libavcodec.bc "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/lib2/libswscale.bc "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/lib2/libswresample.bc "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("/lib2/libavutil.bc -Os -s "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("WASM")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" -o index.html -s "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("EXTRA_EXPORTED_RUNTIME_METHODS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'["ccall", "cwrap"]\'')]),e._v(" -s "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("ALLOW_MEMORY_GROWTH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" -s "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("TOTAL_MEMORY")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("16777216")]),e._v("\n")])])]),s("p",[e._v("参考文献：")]),e._v(" "),s("p",[e._v("https://zhuanlan.zhihu.com/p/27910351")]),e._v(" "),s("p",[e._v("https://www.yinchengli.com/2018/07/28/wasm-ffmpeg-get-video-frame/?tdsourcetag=s_pctim_aiomsg")]),e._v(" "),s("p",[e._v("https://github.com/liyincheng/ffmpeg-wasm-video-to-picture")]),e._v(" "),s("p",[e._v("http://kripken.github.io/emscripten-site/docs/porting/emscripten-runtime-environment.html")])])}),[],!1,null,null,null);a.default=r.exports}}]);