(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{742:function(t,e,s){"use strict";s.r(e);var a=s(104),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[s("code",[t._v("javascript")]),t._v(" 这门语言的性能无法与原生的 "),s("code",[t._v("C/C++")]),t._v(" 代码相媲美，为了进一步提高网页的性能，业界推出了 "),s("code",[t._v("WebAssembly")]),t._v(" 技术：将C语言编译成了浏览器可以执行的 "),s("code",[t._v("wasm")]),t._v(" 文件。"),s("code",[t._v("WebAssembly")]),t._v(" 不仅提高了网页的性能，而且还可以完成原来 "),s("code",[t._v("javascript")]),t._v(" 无法实现的功能。")]),t._v(" "),s("p",[s("code",[t._v("wasm")]),t._v(" 是 "),s("code",[t._v("WebAssembly")]),t._v(" 格式的浏览器可执行文件。它是二进制的，但是它并不像桌面 "),s("code",[t._v("win32")]),t._v(" 程序一样，可以随便使用系统资源，调用操作系统api。事实上，所有与外界相关的操作都必须由 "),s("code",[t._v("javascript")]),t._v(" 传入。比如：要申请一段内存，必须由 "),s("code",[t._v("javascript")]),t._v(" 申请了并传给他。 "),s("code",[t._v("浏览器上，javascript")]),t._v(" 做不到的，它也做不到；"),s("code",[t._v("javascript")]),t._v(" 能做到的，它能做的更快。这个就是它的价值。")]),t._v(" "),s("p",[t._v("要想使用 "),s("code",[t._v("WebAssembly")]),t._v("，就需要通过 "),s("code",[t._v("Emscripten")]),t._v(" 编译器将C语言编译成 "),s("code",[t._v("wasm")]),t._v(" 文件，但是"),s("a",{attrs:{href:"https://kripken.github.io/emscripten-site/docs/getting_started/downloads.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方安装教程"),s("OutboundLink")],1),t._v("不够清楚，由于国外网速慢，执行命令很容易下载失败，有必要再总结下安装过程顺便说一下解决方法。")]),t._v(" "),s("p",[t._v("官网："),s("a",{attrs:{href:"https://kripken.github.io/emscripten-site/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://kripken.github.io/emscripten-site/index.html"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("安装系统：ubuntu 16.04")]),t._v(" "),s("h2",{attrs:{id:"下载和安装"}},[t._v("下载和安装 "),s("a",{staticClass:"header-anchor",attrs:{href:"#下载和安装"}},[t._v("#")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Get the emsdk repo")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/juj/emsdk.git\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Enter that directory")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" emsdk\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fetch the latest version of the emsdk (not needed the first time you clone)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Download and install the latest SDK tools.")]),t._v("\n./emsdk "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" latest\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Make the "latest" SDK "active" for the current user. (writes ~/.emscripten file)')]),t._v("\n./emsdk activate latest\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Activate PATH and other environment variables in the current terminal")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" ./emsdk_env.sh\n")])])]),s("p",[t._v("在执行 "),s("code",[t._v("emsdk install latest")]),t._v(" 会下载安装很多东西，有一个东西300多M，又由于是从国外下载，下载很容易出错，不过你可以提前下载好，放在命令行提示的保存路径 zips 下，再执行这条命令就可以解决问题。")]),t._v(" "),s("h2",{attrs:{id:"安装成功如下图所示"}},[t._v("安装成功如下图所示 "),s("a",{staticClass:"header-anchor",attrs:{href:"#安装成功如下图所示"}},[t._v("#")])]),t._v(" "),s("p",[s("img",{attrs:{src:"http://images.fuyix.cn/blog/181009/Jk5IkgIg84.png?imageslim",alt:"mark"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"http://images.fuyix.cn/blog/181009/ekC2mcBAL1.png?imageslim",alt:"mark"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"http://images.fuyix.cn/blog/181009/8HaFhmmiJa.png?imageslim",alt:"mark"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"http://images.fuyix.cn/blog/181009/Fd0B6mib5B.png?imageslim",alt:"mark"}})]),t._v(" "),s("h2",{attrs:{id:"测试编译简单的-c-c-代码"}},[t._v("测试编译简单的 c++/c 代码 "),s("a",{staticClass:"header-anchor",attrs:{href:"#测试编译简单的-c-c-代码"}},[t._v("#")])]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('#include <stdio.h>\n\nint main() {\n  printf("hello, world!\\n");\n  return 0;\n}\n')])])]),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("./emcc hello_world.c\nnode a.out.js\n")])])]),s("p",[t._v("默认情况下，emcc 只输出了一个 js（asmjs）。asmjs 是 webassembly 的一个早期原型，可提供webassembly 在旧版本浏览器上的兼容。按如下命令输出 webassembly 二进制 wasm 。")]),t._v(" "),s("div",{staticClass:"language-c++ extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("./emcc hello_world.c -s WASM=1 -o index.html\n")])])]),s("p",[t._v("这次编译输出了 "),s("code",[t._v("index.html, index.js, index.wasm")]),t._v(" 三个文件。通过一个静态服务器打开index.html，可以看到 console 里的输出。")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://images.fuyix.cn/blog/181009/G63E43hij2.png?imageslim",alt:"mark"}})]),t._v(" "),s("p",[t._v("这个 index.html 是一个调试页面。生产上加载 webassembly 一般都需要自己写 index.html，只保留js 和 wasm 文件就够了。")]),t._v(" "),s("p",[t._v("以上的例子中，printf 的标准输出被定向到了浏览器的 console 里面。 系统API 调用被换成了 js 实现。 事实上很多 libc 里面的函数被 emscripten 实现成了浏览器上的兼容方案，从而更好的和浏览器结合。")]),t._v(" "),s("h2",{attrs:{id:"emsctipten-api"}},[t._v("Emsctipten API "),s("a",{staticClass:"header-anchor",attrs:{href:"#emsctipten-api"}},[t._v("#")])]),t._v(" "),s("p",[t._v("Emscripten sdk 提供了很多API与js运行环境／浏览器交互。参考"),s("a",{attrs:{href:"https://segmentfault.com/a/1190000012798495#articleHeader9",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://segmentfault.com/a/1190000012798495#articleHeader9"),s("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);