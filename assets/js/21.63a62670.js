(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{745:function(s,t,a){"use strict";a.r(t);var n=a(104),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker-基本操作"}},[s._v("docker 基本操作 "),a("a",{staticClass:"header-anchor",attrs:{href:"#docker-基本操作"}},[s._v("#")])]),s._v(" "),a("h2",{attrs:{id:"镜像基本操作"}},[s._v("镜像基本操作 "),a("a",{staticClass:"header-anchor",attrs:{href:"#镜像基本操作"}},[s._v("#")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("docker pull 镜像名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拉取镜像到本地")]),s._v("\n\ndocker images "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看全部本地的镜像")]),s._v("\n\ndocker rmi 镜像的标识 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除本地镜像")]),s._v("\n\ndocker save -o 导出的路径 镜像id "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将本地的镜像导出")]),s._v("\n\ndocker load -i 镜像文件 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 加载本地的镜像文件")]),s._v("\n\ndocker tag 镜像id 新镜像名称∶版本 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改镜像名称")]),s._v("\n")])])]),a("h2",{attrs:{id:"容器基本操作"}},[s._v("容器基本操作 "),a("a",{staticClass:"header-anchor",attrs:{href:"#容器基本操作"}},[s._v("#")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 运行容器")]),s._v("\ndocker run 镜像的标识镜像名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\ndocker run -d -p 宿主机端口∶容器端口 --name 容器名称 镜像的标识镜像名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -d: 代表后台运行容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -p: 宿主机端口∶容器端口∶ 为了映射当前Linux的端口和容器的端口")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --name 容器名称∶指定容器的名称")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 查看正在运行的容器")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("-qa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -a: 查看全部的容器，包括没有运行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -q: 只查看容器得到标识")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 查看容器的日志")]),s._v("\ndocker logs -f 容器id\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -f: 可以滚动查看日志的最后几行")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4. 进入到容器内部")]),s._v("\ndocker exec-it 容器id "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5. 删除容器（删除容器前，需要先停止容器）")]),s._v("\ndocker stop 容器ID "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止指定的容器")]),s._v("\ndocker stop "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -qa"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止全部容器")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" 容器id "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除指定容器")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -qa"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除全部容器")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 6. 启动容器")]),s._v("\ndocker start 容器ID\n")])])]),a("h2",{attrs:{id:"数据卷"}},[s._v("数据卷 "),a("a",{staticClass:"header-anchor",attrs:{href:"#数据卷"}},[s._v("#")])]),s._v(" "),a("blockquote",[a("p",[s._v("数据卷：将宿主机的一个目录映射到容器的一个目录中可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会跟着一起改变")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1.创建数据卷")]),s._v("\ndocker volume create 数据卷名称\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建数据卷之后，默认会存放在一个目录下 /var/lib/docker/volumes/数据卷名称/_data")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2.查看数据卷的详细信息")]),s._v("\ndocker volume inspect 数据卷名称\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3.查看全部数据卷")]),s._v("\ndocker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4.删除数据卷")]),s._v("\ndocker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" 数据卷名称\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5.应用数据卷")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当你映射数据卷时，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中。")]),s._v("\ndocker run -v 数据卷名称∶容器内部的路径 镜像id\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 直接指定一个路径作为数据卷的存放位置。这个路径下是空的。")]),s._v("\ndocker run -v 路径∶容器内部的路径 镜像id\n")])])]),a("h2",{attrs:{id:"自定义镜像"}},[s._v("自定义镜像 "),a("a",{staticClass:"header-anchor",attrs:{href:"#自定义镜像"}},[s._v("#")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 创建一个 Dockerfile 文件，并且指定自定义镜像信息。")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Dockerfile文件中常用的内容")]),s._v("\nfrom∶ 指定当前自定义镜像依赖的环境\ncopy∶ 将相对路径下的内容复制到自定义镜像中\nworkdir∶ 声明镜像的默认工作目录\ncmd∶ 需要执行的命令（在workdir下执行的，cmd可以写多的，只以最后一个为准）\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 举个例子，自定义一个 tomcat 镜像，并且将 ssm.war 部署到 tomcat 中")]),s._v("\nfrom daocloud.io/library/tomcat:8.5.15-jre8\ncopy ssm.war /usr/local/tomcat/webapps\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 将准备好 Dockerfile 和相应的文件拖拽到 Linux 操作系统中，通过Docker的命令制作镜像")]),s._v("\ndocker build -t 镜像名称"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h2",{attrs:{id:"docker-compose"}},[s._v("docker-compose "),a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[s._v("#")])]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("之前运行一个镜像，需要添加大量的参数。")]),s._v(" "),a("li",[s._v("可以通过 Docker-Compose 编写这些参数。")]),s._v(" "),a("li",[s._v("Docker-Compose 可以帮助我们批量的管理容器。")]),s._v(" "),a("li",[s._v("只需要通过一个 docker-compose.yml 文件去维护即可。")])])]),s._v(" "),a("h3",{attrs:{id:"下载安装-docker-compose"}},[s._v("下载安装 docker-compose "),a("a",{staticClass:"header-anchor",attrs:{href:"#下载安装-docker-compose"}},[s._v("#")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 去github官网搜索docker-compose，下载1.24.1版本的Docker-Compose")]),s._v("\nhttps://github.com/docker/compose/releases/dowmload/1.24.1/docker-compose-Linux-x86_64\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. 将下载好的文件，拖拽到Linux操作系统中")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 3. 需要将DockerCompose文件的名称修改一下，基于DockerCompose文件一个可执行的权限")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" docker-compose-Linux-x86_64 docker-compose\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chmod")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("777")]),s._v(" docker-compose\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4. 方便后期操作，配置一个环境变量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将docker-compose文件移动到了/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到了PATH中")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" docker-compose /usr/local/bin\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vi")]),s._v(" /etc/profile\n    "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("export")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("PATH")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$JAVA_HOME")]),s._v(":/usr/local/bin:"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$PATH")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" /etc/profile\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5.测试一下")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在任意目录下输入docker-compose")]),s._v("\n")])])]),a("h3",{attrs:{id:"docker-compose-管理-mysql-和-tomcat-容器"}},[s._v("Docker-Compose 管理 MySQL 和 Tomcat 容器 "),a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-管理-mysql-和-tomcat-容器"}},[s._v("#")])]),s._v(" "),a("blockquote",[a("p",[s._v("yml 文件以 key∶ value 方式来指定配置信息多个配置信息以换行 + 缩进的方式来区分在 docker-compose.yml 文件中，不要使用制表符")])]),s._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[s._v("version"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3.1'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("mysql")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 服务的名称")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" always          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 代表只要Docker启动，那么这个容器就跟着一起启动")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" daocloud.io/library/mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("5.7.4     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定镜像路径")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" mysql    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定容器名称")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" 3306"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3306")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定端口号的映射")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" root         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定MySQL的ROOT用户登录密码")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("TZ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Asia/Shanghai                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定时区")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" /opt/docker_mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("tomcat/mysql_data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("/var/lib/mysql        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 映射数据卷")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("tomcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" always          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 代表只要Docker启动，那么这个容器就跟着一起启动")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" daocloud.io/library/tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("8.5.15"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("jre8     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定镜像路径")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" tomcat    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定容器名称")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" 8080"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" root         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定MySQL的ROOT用户登录密码")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("TZ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Asia/Shanghai\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("volumes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" /opt/docker_mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("tomcat/tomcat_webapps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("/usr/local/tomcat/webapps\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v(" /opt/docker_mysql"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("tomcat/tomcat_logs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("/usr/local/tomcat/logs\n\n")])])]),a("h3",{attrs:{id:"使用-docker-compose-命令管理容器"}},[s._v("使用 docker-compose 命令管理容器 "),a("a",{staticClass:"header-anchor",attrs:{href:"#使用-docker-compose-命令管理容器"}},[s._v("#")])]),s._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在使用 docker-compose 的命令时，默认会在当前目录下找 docker-compose.yml 文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. 基于docker-compose.yml启动管理的容器")]),s._v("\ndocker-compose up -d\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2.关闭并删除容器")]),s._v("\ndocker-compose down\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#3.开启关闭重启已经存在的由docker-compose维护的容器")]),s._v("\ndocker-compose start"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("stop"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("restart\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 4. 查看由docker-compose管理的容器")]),s._v("\ndocker-compose "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 5.查看日志")]),s._v("\ndocker-compose logs -f\n\n")])])]),a("h3",{attrs:{id:"docker-compose-配置-dockerfile-使用"}},[s._v("docker-compose 配置 Dockerfile 使用 "),a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-配置-dockerfile-使用"}},[s._v("#")])]),s._v(" "),a("blockquote",[a("p",[s._v("使用 docker-compose.yml 文件以及 Dockerfile 文件在生成自定义镜像的同时启动当前镜像，并且由 docker-compose 去管理容器")])]),s._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# yml文件")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("version")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3.1'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ssm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" always\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 构建自定义镜像")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("context")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ../                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定Dockerfile文件所在路径")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("dockerfile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Dockerfile         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定Dockerfile文件名称")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ssm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("1.0.1\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("container_name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" ssm\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      8081"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("environment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("TZ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Asia/Shanghai\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Dockerfile 文件")]),s._v("\nfrom daocloud.io/library/tomcat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("8.5.15"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("-")]),s._v("jre8\ncopy ssm.war /usr/local/tomcat/webapps\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);