(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{775:function(t,s,a){"use strict";a.r(s);var n=a(104),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"算法的提出"}},[t._v("算法的提出 "),a("a",{staticClass:"header-anchor",attrs:{href:"#算法的提出"}},[t._v("#")])]),t._v(" "),a("h2",{attrs:{id:"算法的概念"}},[t._v("算法的概念 "),a("a",{staticClass:"header-anchor",attrs:{href:"#算法的概念"}},[t._v("#")])]),t._v(" "),a("p",[t._v("算法是计算机处理信息的本质，因为计算机程序本质上是一个算法来告诉计算机确切的步骤来执行一个指定的任务。一般地，当算法在处理信息时，会从输入设备或数据的存储地址读取数据，把结果写入输出设备或某个存储地址供以后再调用。")]),t._v(" "),a("p",[a("strong",[t._v("算法是独立存在的一种解决问题的方法和思想。")])]),t._v(" "),a("p",[t._v("对于算法而言，实现的语言并不重要，重要的是思想。")]),t._v(" "),a("p",[t._v("算法可以有不同的语言描述实现版本（如C描述、C++描述、Python描述等），我们现在是在用Python语言进行描述实现。")]),t._v(" "),a("h2",{attrs:{id:"算法的五大特性"}},[t._v("算法的五大特性 "),a("a",{staticClass:"header-anchor",attrs:{href:"#算法的五大特性"}},[t._v("#")])]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("输入:")]),t._v(" 算法具有0个或多个输入")]),t._v(" "),a("li",[a("strong",[t._v("输出:")]),t._v(" 算法至少有1个或多个输出")]),t._v(" "),a("li",[a("strong",[t._v("有穷性:")]),t._v(" 算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成")]),t._v(" "),a("li",[a("strong",[t._v("确定性：")]),t._v(" 算法中的每一步都有确定的含义，不会出现二义性")]),t._v(" "),a("li",[a("strong",[t._v("可行性：")]),t._v(" 算法的每一步都是可行的，也就是说每一步都能够执行有限的次数完成")])]),t._v(" "),a("h1",{attrs:{id:"算法效率衡量"}},[t._v("算法效率衡量 "),a("a",{staticClass:"header-anchor",attrs:{href:"#算法效率衡量"}},[t._v("#")])]),t._v(" "),a("h2",{attrs:{id:"执行时间反应算法效率"}},[t._v("执行时间反应算法效率 "),a("a",{staticClass:"header-anchor",attrs:{href:"#执行时间反应算法效率"}},[t._v("#")])]),t._v(" "),a("p",[t._v("实现算法程序的执行时间可以反应出算法的效率，即算法的优劣。")]),t._v(" "),a("p",[t._v("单纯依靠运行的时间来比较算法的优劣并不一定是客观准确的！")]),t._v(" "),a("p",[t._v("程序的运行离不开计算机环境（包括硬件和操作系统），这些客观原因会影响程序运行的速度并反应在程序的执行时间上。那么如何才能客观的评判一个算法的优劣呢？")]),t._v(" "),a("h2",{attrs:{id:"时间复杂度与-大o记法"}},[t._v("时间复杂度与“大O记法” "),a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度与-大o记法"}},[t._v("#")])]),t._v(" "),a("p",[t._v("我们假定计算机执行算法每一个基本操作的时间是固定的一个时间单位，那么有多少个基本操作就代表会花费多少时间单位。固然对于不同的机器环境而言，确切的单位时间是不同的，但是对于算法进行多少个基本操作（即花费多少时间单位）在规模数量级上却是相同的，由此可以忽略机器环境的影响而客观的反应算法的时间效率。")]),t._v(" "),a("p",[t._v("对于算法的时间效率，我们可以用“大O记法”来表示。")]),t._v(" "),a("p",[a("strong",[t._v("“大O记法”：对于单调的整数函数f，如果存在一个整数函数g和实常数c>0，使得对于充分大的n总有f(n)<=c*g(n)，就说函数g是f的一个渐近函数（忽略常数），记为f(n)=O(g(n))。也就是说，在趋向无穷的极限意义下，函数f的增长速度受到函数g的约束，亦即函数f与函数g的特征相似。")])]),t._v(" "),a("p",[a("strong",[t._v("时间复杂度：")]),t._v(" 假设存在函数g，使得算法A处理规模为n的问题示例所用时间为T(n)=O(g(n))，则称O(g(n))为算法A的渐近时间复杂度，简称时间复杂度，记为T(n)")]),t._v(" "),a("h2",{attrs:{id:"最坏时间复杂度"}},[t._v("最坏时间复杂度 "),a("a",{staticClass:"header-anchor",attrs:{href:"#最坏时间复杂度"}},[t._v("#")])]),t._v(" "),a("p",[t._v("分析算法时，存在几种可能的考虑：")]),t._v(" "),a("ul",[a("li",[t._v("算法完成工作最少需要多少基本操作，即"),a("strong",[t._v("最优时间复杂度")])]),t._v(" "),a("li",[t._v("算法完成工作最多需要多少基本操作，即"),a("strong",[t._v("最坏时间复杂度")])]),t._v(" "),a("li",[t._v("算法完成工作平均需要多少基本操作，即"),a("strong",[t._v("平均时间复杂度")])])]),t._v(" "),a("p",[t._v("对于最优时间复杂度，其价值不大，因为它没有提供什么有用信息，其反映的只是最乐观最理想的情况，没有参考价值。")]),t._v(" "),a("p",[t._v("对于最坏时间复杂度，提供了一种保证，表明算法在此种程度的基本操作中一定能完成工作。")]),t._v(" "),a("p",[t._v("对于平均时间复杂度，是对算法的一个全面评价，因此它完整全面的反映了这个算法的性质。但另一方面，这种衡量并没有保证，不是每个计算都能在这个基本操作内完成。而且，对于平均情况的计算，也会因为应用算法的实例分布可能并不均匀而难以计算。")]),t._v(" "),a("p",[t._v("因此，"),a("strong",[t._v("我们主要关注算法的最坏情况，亦即最坏时间复杂度。")])]),t._v(" "),a("h2",{attrs:{id:"时间复杂度的几条基本计算规则"}},[t._v("时间复杂度的几条基本计算规则 "),a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度的几条基本计算规则"}},[t._v("#")])]),t._v(" "),a("ol",[a("li",[t._v("基本操作，即只有常数项，认为其时间复杂度为O(1)")]),t._v(" "),a("li",[t._v("顺序结构，时间复杂度按加法进行计算")]),t._v(" "),a("li",[t._v("循环结构，时间复杂度按乘法进行计算")]),t._v(" "),a("li",[t._v("分支结构，时间复杂度取最大值")]),t._v(" "),a("li",[t._v("判断一个算法的效率时，往往只需要关注操作数量的最高次项，其它次要项和常数项可以忽略")]),t._v(" "),a("li",[t._v("在没有特殊说明时，我们所分析的算法的时间复杂度都是指最坏时间复杂度")])]),t._v(" "),a("h1",{attrs:{id:"常见时间复杂度"}},[t._v("常见时间复杂度 "),a("a",{staticClass:"header-anchor",attrs:{href:"#常见时间复杂度"}},[t._v("#")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("执行次数函数举例")]),t._v(" "),a("th",[t._v("阶")]),t._v(" "),a("th",[t._v("非正式术语")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("12")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("常数阶")])]),t._v(" "),a("tr",[a("td",[t._v("2n+3")]),t._v(" "),a("td",[t._v("O(n)")]),t._v(" "),a("td",[t._v("线性阶")])]),t._v(" "),a("tr",[a("td",[t._v("3n2+2n+1")]),t._v(" "),a("td",[t._v("O(n2)")]),t._v(" "),a("td",[t._v("平方阶")])]),t._v(" "),a("tr",[a("td",[t._v("5log2n+20")]),t._v(" "),a("td",[t._v("O(logn)")]),t._v(" "),a("td",[t._v("对数阶")])]),t._v(" "),a("tr",[a("td",[t._v("2n+3nlog2n+19")]),t._v(" "),a("td",[t._v("O(nlogn)")]),t._v(" "),a("td",[t._v("nlogn阶")])]),t._v(" "),a("tr",[a("td",[t._v("6n3+2n2+3n+4")]),t._v(" "),a("td",[t._v("O(n3)")]),t._v(" "),a("td",[t._v("立方阶")])]),t._v(" "),a("tr",[a("td",[t._v("2n")]),t._v(" "),a("td",[t._v("O(2n)")]),t._v(" "),a("td",[t._v("指数阶")])])])]),t._v(" "),a("p",[a("strong",[t._v("注意，经常将log2n（以2为底的对数）简写成logn")])]),t._v(" "),a("p",[t._v("所消耗的时间从小到大")]),t._v(" "),a("p",[a("strong",[t._v("O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(n3) < O(2n) < O(n!) < O(nn)")])]),t._v(" "),a("h1",{attrs:{id:"python内置类型性能分析"}},[t._v("Python内置类型性能分析 "),a("a",{staticClass:"header-anchor",attrs:{href:"#python内置类型性能分析"}},[t._v("#")])]),t._v(" "),a("h2",{attrs:{id:"timeit模块"}},[t._v("timeit模块 "),a("a",{staticClass:"header-anchor",attrs:{href:"#timeit模块"}},[t._v("#")])]),t._v(" "),a("p",[t._v("timeit模块可以用来测试一小段Python代码的执行速度。")]),t._v(" "),a("h3",{attrs:{id:"class-timeit-timer-stmt-pass-setup-pass-timer"}},[t._v("class timeit.Timer(stmt='pass', setup='pass', timer="),a("timer",{attrs:{function:""}},[t._v(") "),a("a",{staticClass:"header-anchor",attrs:{href:"#class-timeit-timer-stmt-pass-setup-pass-timer"}},[t._v("#")])])],1),t._v(" "),a("p",[t._v("Timer是测量小段代码执行速度的类。")]),t._v(" "),a("p",[t._v("stmt参数是要测试的代码语句（statment）；")]),t._v(" "),a("p",[t._v("setup参数是运行代码时需要的设置；")]),t._v(" "),a("p",[t._v("timer参数是一个定时器函数，与平台有关。")]),t._v(" "),a("h3",{attrs:{id:"timeit-timer-timeit-number-1000000"}},[t._v("timeit.Timer.timeit(number=1000000) "),a("a",{staticClass:"header-anchor",attrs:{href:"#timeit-timer-timeit-number-1000000"}},[t._v("#")])]),t._v(" "),a("p",[t._v("Timer类中测试语句执行速度的对象方法。number参数是测试代码时的测试次数，默认为1000000次。方法返回执行代码的平均耗时，一个float类型的秒数。")]),t._v(" "),a("h2",{attrs:{id:"list的操作测试"}},[t._v("list的操作测试 "),a("a",{staticClass:"header-anchor",attrs:{href:"#list的操作测试"}},[t._v("#")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("append"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" timeit "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Timer\n\nt1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test1()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"from __main__ import test1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"concat "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"seconds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nt2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test2()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"from __main__ import test2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"append "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"seconds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nt3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test3()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"from __main__ import test3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"comprehension "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"seconds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nt4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test4()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"from __main__ import test4"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"list range "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"seconds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ('concat ', 1.7890608310699463, 'seconds')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ('append ', 0.13796091079711914, 'seconds')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ('comprehension ', 0.05671119689941406, 'seconds')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ('list range ', 0.014147043228149414, 'seconds')")]),t._v("\n")])])]),a("p",[a("strong",[t._v("pop操作测试")])]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npop_zero "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x.pop(0)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"from __main__ import x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pop_zero "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pop_zero"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"seconds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npop_end "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Timer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"x.pop()"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"from __main__ import x"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pop_end "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("pop_end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"seconds"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ('pop_zero ', 1.9101738929748535, 'seconds')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ('pop_end ', 0.00023603439331054688, 'seconds')")]),t._v("\n")])])]),a("p",[a("strong",[t._v("测试pop操作：从结果可以看出，pop最后一个元素的效率远远高于pop第一个元素")])]),t._v(" "),a("h2",{attrs:{id:"list内置操作的时间复杂度"}},[t._v("list内置操作的时间复杂度 "),a("a",{staticClass:"header-anchor",attrs:{href:"#list内置操作的时间复杂度"}},[t._v("#")])]),t._v(" "),a("h2",{attrs:{id:"dict内置操作的时间复杂度"}},[t._v("dict内置操作的时间复杂度 "),a("a",{staticClass:"header-anchor",attrs:{href:"#dict内置操作的时间复杂度"}},[t._v("#")])]),t._v(" "),a("h1",{attrs:{id:"数据结构"}},[t._v("数据结构 "),a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")])]),t._v(" "),a("blockquote",[a("p",[t._v("我们如何用Python中的类型来保存一个班的学生信息？ 如果想要快速的通过学生姓名获取其信息呢？")])]),t._v(" "),a("p",[t._v("实际上当我们在思考这个问题的时候，我们已经用到了数据结构。列表和字典都可以存储一个班的学生信息，但是想要在列表中获取一名同学的信息时，就要遍历这个列表，其时间复杂度为O(n)，而使用字典存储时，可将学生姓名作为字典的键，学生信息作为值，进而查询时不需要遍历便可快速获取到学生信息，其时间复杂度为O(1)。")]),t._v(" "),a("p",[t._v("我们为了解决问题，需要将数据保存下来，然后根据数据的存储方式来设计算法实现进行处理，那么数据的存储方式不同就会导致需要不同的算法进行处理。我们希望算法解决问题的效率越快越好，于是我们就需要考虑数据究竟如何保存的问题，这就是数据结构。")]),t._v(" "),a("p",[t._v("在上面的问题中我们可以选择Python中的列表或字典来存储学生信息。列表和字典就是Python内建帮我们封装好的两种数据结构。")]),t._v(" "),a("h2",{attrs:{id:"概念"}},[t._v("概念 "),a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")])]),t._v(" "),a("p",[t._v("数据是一个抽象的概念，将其进行分类后得到程序设计语言中的基本类型。如：int，float，char等。数据元素之间不是独立的，存在特定的关系，这些关系便是结构。数据结构指数据对象中数据元素之间的关系。")]),t._v(" "),a("p",[t._v("Python给我们提供了很多现成的数据结构类型，这些系统自己定义好的，不需要我们自己去定义的数据结构叫做Python的内置数据结构，比如列表、元组、字典。而有些数据组织方式，Python系统里面没有直接定义，需要我们自己去定义实现这些数据的组织方式，这些数据组织方式称之为Python的扩展数据结构，比如栈，队列等。")]),t._v(" "),a("h2",{attrs:{id:"算法与数据结构的区别"}},[t._v("算法与数据结构的区别 "),a("a",{staticClass:"header-anchor",attrs:{href:"#算法与数据结构的区别"}},[t._v("#")])]),t._v(" "),a("p",[t._v("数据结构只是静态的描述了数据元素之间的关系。")]),t._v(" "),a("p",[t._v("高效的程序需要在数据结构的基础上设计和选择算法。")]),t._v(" "),a("p",[a("strong",[t._v("程序 = 数据结构 + 算法")])]),t._v(" "),a("p",[a("strong",[t._v("总结：算法是为了解决实际问题而设计的，数据结构是算法需要处理的问题载体")])]),t._v(" "),a("h2",{attrs:{id:"抽象数据类型-abstract-data-type"}},[t._v("抽象数据类型(Abstract Data Type) "),a("a",{staticClass:"header-anchor",attrs:{href:"#抽象数据类型-abstract-data-type"}},[t._v("#")])]),t._v(" "),a("p",[a("strong",[t._v("抽象数据类型(ADT)")]),t._v(" 的含义是指一个数学模型以及定义在此数学模型上的一组操作。即把数据类型和数据类型上的运算捆在一起，进行封装。引入抽象数据类型的目的是把数据类型的表示和数据类型上运算的实现与这些数据类型和运算在程序中的引用隔开，使它们相互独立。")]),t._v(" "),a("p",[t._v("最常用的数据运算有五种：")]),t._v(" "),a("ul",[a("li",[t._v("插入")]),t._v(" "),a("li",[t._v("删除")]),t._v(" "),a("li",[t._v("修改")]),t._v(" "),a("li",[t._v("查找")]),t._v(" "),a("li",[t._v("排序")])])])}),[],!1,null,null,null);s.default=r.exports}}]);